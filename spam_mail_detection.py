# -*- coding: utf-8 -*-
"""Spam_mail_detection

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1diOzerF2owZyLAf9py8Zu40ahtmmX6Cd
"""

import numpy as np
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score

df = pd.read_csv('/content/spam.csv', encoding='latin1') # or 'ISO-8859-1'

df.head()

# Dropping columns
cols_to_drop = ['Unnamed: 2', 'Unnamed: 3', 'Unnamed: 4']
df = df.drop(cols_to_drop, axis=1)

df = df. rename(columns = { 'v1': 'Category', 'v2': 'Message'})

print(df)

# Replacing null values with null/empty string

mail_data = df.where(pd.notnull(df),'')

df.head()

print(mail_data.shape) # (rows, cols)

"""### Label Encoding

Encoding the label values into numerical values.
"""

# Printing the label values
print(pd.unique(mail_data['Category']))

# Labelling spam mails as 1 and ham mails as 0

# Selecting the rows with Catogory values with label spam and replacing the label value as 1
mail_data.loc[mail_data['Category'] == 'spam', 'Category',] = 1

mail_data.loc[mail_data['Category'] == 'ham', 'Category',] = 0

mail_data.head()

# Splitting the dataset into message data and labels

X = mail_data['Message']
y = mail_data['Category']

"""### Train-Test Split"""

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2, random_state = 3)
print(X.shape, X_train.shape, X_test.shape)

"""### Feature Extracting"""

# Converting the text data to feature vector

feature_extraction = TfidfVectorizer(min_df = 1, stop_words='english', lowercase = True)
# min_df = 1 means that we ignore any words with a score less than 1
# stop_words are the words with very less meaning
# lowercase = 'True' meaning all the words are changed to lowercase before processing

# Using the vectoriser to convert the text to numerical values

# Data is being fit into the vectoriser and transform into numerical data
x_train_processed = feature_extraction.fit_transform(X_train)

# We do not fit the test data because we dont want our model to look at the test data.
x_test_processed = feature_extraction.transform(X_test)

# Converting all values as intergers for easy processing

y_train = y_train.astype('int')
y_test = y_test.astype('int')

print(x_train_processed)

"""### Training the model - Logistic Regression"""

model = LogisticRegression()

# Training the model on the training data

model.fit(x_train_processed, y_train)

# Evaluating the performance of the model

# All predicted value are stored in y_pred
y_pred = model.predict(x_train_processed)

# Comparing y_pred and y_true
accuracy_training = accuracy_score(y_train, y_pred)
print(accuracy_training)

# Predicting for test data

y_pred_test = model.predict(x_test_processed)
accuracy_testing = accuracy_score(y_test, y_pred_test)
print(accuracy_testing)

"""### Building a Predictive System"""

input_mail = ["Did I forget to tell you ? I want you , I need you, I crave you ... But most of all ... I love you my sweet Arabian steed ... Mmmmmm ... Yummy"]

# Converting input to feature vector
processed_input_mail = feature_extraction.transform(input_mail)

# Prediction
prediction = model.predict(processed_input_mail)
print(prediction)

if (prediction[0]==1):
  print('Spam mail')

else:
  print('Ham mail')